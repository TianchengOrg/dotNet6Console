using Microsoft.AspNetCore.Mvc;

namespace {namespace}.Controllers.System;

/// <summary>
/// 描述：{description}
/// 作者：{auther}
/// 创建日期：{createDate}
/// 版本：{version}
/// </summary>

[Route("[controller]/[action]")]
public class {className}Controller:RocController
{
    /// <summary>
    /// {className} 服务接口
    /// </summary>
    private readonly I{className}Services service;

    /// <summary>
    /// {className} 构造函数
    /// </summary>
    public {className}Controller(I{className}Services service)
    {
        this.service = service;
    }

    /// <summary>
    /// {className} 添加
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    [ActionName("insert")]
    public async Task<ResponseResult> insertAsync({className} input)
    {
        input.CurrentUser = this.CurrentUser;
        var result = await service.addAsync(input);
        if (result == RocCode.Success)
            return Success("插入成功！");
        else
            return Error("插入失败！",result);
    }

    /// <summary>
    /// 删除 {className} 信息
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    [ActionName("delete")]
    public async Task<ResponseResult> deleteAsync({className} input)
    {
        input.CurrentUser = this.CurrentUser;
        var result = await service.deleteAsync(input);
        if (result == RocCode.Success)
            return Success("删除成功！");
        else
            return Error(result.ToString());
    }

    /// <summary>
    /// 更新 {className} 信息
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    [ActionName("modify")]
    public async Task<ResponseResult> modifyAsync({className} input)
    {
        input.CurrentUser = this.CurrentUser;
        var result = await service.ModifyAsync(input);
        if (result == RocCode.Success)
            return Success(result.ToString());
        else
            return Error(result.ToString());
    }

    /// <summary>
    /// {className}  列表
    /// </summary>
    [HttpPost]
    [ActionName("getPagelist")]
    public async Task<ResponseResult<RocPage<IEnumerable<{className}>>>> getPagelist(RocPage<{className}> inputs)
    {
        return Success(await service.getPagelist(inputs));
    }

    /// <summary>
    /// {className}  查询全部列表
    /// </summary>
    [HttpPost]
    [ActionName("getList")]
    public async Task<ResponseResult<IEnumerable<{className}>>> getList({className} input)
    {
        return Success(await service.getList(input));
    }

    /// <summary>
    /// 获取 {className}  单个
    /// </summary>
    [HttpPost]
    [ActionName("getEntity")]
    public async Task<ResponseResult<{className}>> getEntity({className} input)
    {
        var result = await service.getEntity(input);
        if(result.Item1 == RocCode.Success)
        {
            return Success(result.Item2);
        }
        else
        {
            return Error("查询失败", result.Item2);
        }
        
    }
    
}


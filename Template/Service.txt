using Roc.Const;
using Roc.Models;
using Roc.utils;
using SqlSugar;
using Single.Entities.Entity;
using Single.Services.IService;
using Microsoft.Extensions.Logging;

namespace {namespace}.Services.Service;

/// <summary>
/// 描述：{description}
/// 作者：{auther}
/// 创建日期：{createDate}
/// 版本：{version}
/// </summary>

public class {className}Services : I{className}Services
{
    /// <summary>
    /// 日志模块
    /// </summary>
    private readonly ILogger<{className}Services> logger;
    /// <summary>
    /// 仓储字段
    /// </summary>
    private SqlSugarScopeProvider repository;

    public {className}Services(ISqlSugarClient _sqlSugarClient,
                                ILogger<{className}Services> logger)
    {
        this.logger = logger;
        repository = (_sqlSugarClient as SqlSugarScope).GetConnectionScope("{DataBase}");
    }



    /// <summary>
    /// 添加新的{className}
    /// </summary>
    public async Task<int> addAsync({className} input, RocUser rocUser)
    {
        if (rocUser == null)
            return RocCode.User_None;

        input.Create(rocUser);
        logger.LogInformation($"insert {className} by {rocUser.Account} param {JsonUtil.ObjectToJson(input)}");
        await repository.Insertable<{className}>(input).ExecuteCommandAsync();
        return RocCode.Success;
    }

    /// <summary>
    /// 根据ID删除{className}
    /// </summary>
    public async Task<int> deleteAsync({className} input, RocUser rocUser)
    {
        if (rocUser == null)
            return RocCode.User_None;

        logger.LogInformation($"delete {className} by {rocUser.Account} param {JsonUtil.ObjectToJson(input)}");
        await repository.Deleteable<{className}>(input).ExecuteCommandAsync();
        return RocCode.Success;
    }

    /// <summary>
    /// 更新{className}
    /// </summary>
    public async Task<int> ModifyAsync({className} input, RocUser rocUser)
    {
        if (rocUser == null)
            return RocCode.User_None;

        logger.LogInformation($"Modify {className} by {rocUser.Account} param {JsonUtil.ObjectToJson(input)}");
        await repository.Updateable<{className}>(input).ExecuteCommandAsync();
        return RocCode.Success;
    }

    /// <summary>
    /// 分页获取所有{className}
    /// </summary>
    public async Task<RocPage<IEnumerable<{className}>>> getPagelist(RocPage<{className}> inputs)
    {
        //分页查询
        RefAsync<int> total = 0;
        var input = inputs.Data;
        var data = await repository.Queryable<{className}>()
{queryContent}
            .OrderByPropertyName(inputs.OrderField, inputs.Ascending?OrderByType.Asc: OrderByType.Desc)
            .ToPageListAsync(inputs.PageIndex, inputs.PageSize, total);

        return new RocPage<IEnumerable<{className}>>
        {
            PageIndex = inputs.PageIndex,
            Ascending = inputs.Ascending,
            PageSize = inputs.PageSize,
            OrderField = inputs.OrderField,
            Total = (long)total,
            Data = data
        };
    }

    /// <summary>
    /// 获取所有{className}
    /// </summary>
    public async Task<IEnumerable<{className}>> getList({className} input)
    {
        //分页查询
        var data = await repository.Queryable<{className}>()
{queryContent}
            .ToListAsync();

        return data;
    }

    public async Task<{className}> getEntity({className} input)
    {
        var data = await repository.Queryable<{className}>()
{queryContent}
            .Take(1)
            .ToListAsync();
        return data.FirstOrDefault();
    }

}

